- Can we use uniform buffer objects? https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html (I think that we can't with the current API value.set_uniform(location))
- Send an error if the user tries to create a texture bigger than allowed (check text api we're doing this there)
- Compress textures? https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html
- Init uniforms on the shader's constructor and remove the RefCell<HashMap<String, WebUniformLocationKey>>?
- Reduce garbage collector presure changing the API with https://github.com/rustwasm/wasm-bindgen/issues/495
- Compile shaders: glsl -> spirv -> (glsl, hlsl, etc...) https://crates.io/crates/shaderc - https://crates.io/crates/spirv_cross
- Webgl Optimizations https://emscripten.org/docs/optimizing/Optimizing-WebGL.html#which-gl-mode-to-target

- Working with VAOs on WebGL1
    - https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object
    - https://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/
    - https://medium.com/@david.komer/dude-wheres-my-data-vao-s-in-webgl-896631783895
    - https://stackoverflow.com/a/46143967

/*TODO check this: drawElements use u16 as indices, 65553 is the max on webgl1
    but drawArrays doesn't have this limit.
    To use drawElements without limit on webgl1 also exists the this extension: OES_element_index_uint https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint
    On webgl2 the limit doesn't exists, but you need to use UNSIGNED_INT as index https://webgl2fundamentals.org/webgl/lessons/webgl2-whats-new.html (i32)
    A way to do this on webgl1 is:
        - try to get the extension
        - If it fails use drawElements by default
        - fallback if indices > 65553 to drawArrays
    On webgl2 we should probably use just drawElements with i32 indices
    --
    # help https://computergraphics.stackexchange.com/questions/3637/how-to-use-32-bit-integers-for-element-indices-in-webgl-1-0
    # var canvas = document.createElement("canvas");
    var gl = canvas.getContext("webgl");
    console.log(gl.getExtension("OES_element_index_uint"));
*/
webgl1 improvements like pot2 or antialisng -> https://doc.babylonjs.com/features/webgl2#multisample-render-targets
